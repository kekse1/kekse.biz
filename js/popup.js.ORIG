(function()
{

	//
	const DEFAULT_PARENT = document.documentElement;

	const DEFAULT_THROW = true;

	const DEFAULT_ARRANGE = true;
	const DEFAULT_POSITION_DURATION = 1200;
	const DEFAULT_DURATION_IN = 2400;
	const DEFAULT_DURATION_OUT = 1800;
	const DEFAULT_TEXT_DURATION = 1700;
	const DEFAULT_TEXT_TIMEOUT_MUL = 0.4;
	const DEFAULT_TEXT_DELETE_MUL = null;//0.2;
	const DEFAULT_Z_INDEX = 16384;
	const DEFAULT_BLINK_COUNT = 1;
	const DEFAULT_BLINK_DURATION = 480;
	const DEFAULT_BLINK_DELAY = 120;
	const DEFAULT_BORDER = 4;
	const DEFAULT_ROTATE = true;
	const DEFAULT_FINISH_TEXT_ANIMATION_ON_PAUSE = true;

	//
	popup = { list: [] };

	Object.defineProperty(popup, 'count', { get: function()
	{
		return popup.list.length;
	}});

	//
	const measureSize = (_popup, _html) => {
		const orig = _popup.innerHTML;
		_popup.innerHTML = _html;
		const [ width, height ] = [ _popup.offsetWidth, _popup.offsetHeight ];
		_popup.innerHTML = orig;
		return [ width, height ];
	};

	const animateInnerHTML = (_callback, _popup, _html, _duration = DEFAULT_TEXT_DURATION, _delete_mul = DEFAULT_TEXT_DELETE_MUL, _throw = DEFAULT_THROW) => {
		const [ width, height ] = measureSize(_popup, _html);

		if(config.bionic)
		{
			_html = bionic(_html);
		}

		_popup.setHTML(_callback, _html, _duration, _delete_mul, 'innerHTML', _throw);
		return [ width, height ];
	};

	const createPopup = (_event, _callback) => {
		//
		if((_popup = checkElem(_event)) === null)
		{
			return null;
		}
		else if(typeof _popup === 'string' && _popup.length === 0)
		{
			return null;
		}
		else if(popup.isPopup(_popup))
		{
			if(_popup.forceDestroy)
			{
				return null;
			}
			else if(! _popup.target.isVisible)
			{
				return destroyPopup(_popup, _event, _popup.forceDestroy = true);
			}

			return updatePopup(_popup, _event);
		}

		//
		const result = document.createElement('div');

		popup.list.push(result);

		result.id = randomID();
		result.className = result.name = 'popup';
		result.popup = result;
		result.target = (_event?.target || _event.popup?.target || _event);
		result.popup = result;
		result.scrolling = false;
		result.style.zIndex = DEFAULT_Z_INDEX.toString();

		//
		result.isDestroyed = false;
		result.forceDestroy = false;

		//
		const html = _popup;

		if(typeof html !== 'string')
		{
			throw new Error('DEBUG (not a string, but: ' + typeOf(html) + ' == ' + html + ' (' + html.id + ' / ' + html.tagName + '..)');
		}

		//
		result.close = result.hide = (_event = null, _force = false) => {
			return destroyPopup(result, _event, _force);
		};

		result.open = result.show = (_event = null) => {
			return updatePopup(result, _event);
		};

		//
		DEFAULT_PARENT.appendChild(result, false, () => {
			//
			const [ width, height ] = measureSize(result, html);

			//
			result.style.width = setValue(width);
			result.style.height = setValue(height);

			//
			popupPosition(null, result, _event, null, false);

			//
			setTimeout(() => {
				animateInnerHTML(_callback, result, html);
			}, DEFAULT_DURATION_IN * DEFAULT_TEXT_TIMEOUT_MUL);

				//
			result.in(null, {
				persist: true,
				duration: DEFAULT_DURATION_IN,
				rotate: DEFAULT_ROTATE,
				border: (DEFAULT_BORDER === false ? false : true),
				borderWidth: ((isString(DEFAULT_BORDER, false) || (isNumber(DEFAULT_BORDER) && DEFAULT_BORDER >= 0)) ? DEFAULT_BORDER : null)
			});
		});

		//
		return result;
	};

	const updatePopup = (_popup, _event = null) => {
		if((_popup = checkElem(_popup)) === null)
		{
			return null;
		}
		else if(typeof _popup === 'string' && _popup.length === 0)
		{
			return null;
		}
		else if(! popup.isPopup(_popup))
		{
			if(_event && _event.target?.isVisible)
			{
				return createPopup(_event, null);
			}

			return null;
		}
		else if(_popup.forceDestroy)
		{
			return null;
		}

		//
		if(typeof _popup.target.dataset.popup !== 'string' || _popup.target.dataset.popup.length === 0)
		{
			return destroyPopup(_popup, _event);
		}

		//
		const show = () => {
			_popup.in(null, {
				persist: true,
				duration: DEFAULT_DURATION_IN,
				rotate: DEFAULT_ROTATE,
				border: (DEFAULT_BORDER === false ? false : true),
				borderWidth: ((isString(DEFAULT_BORDER, false) || (isNumber(DEFAULT_BORDER) && DEFAULT_BORDER >= 0)) ? DEFAULT_BORDER : null)
			});
		};

		if(_event)
		{
			popupPosition(show, _popup, _event, null, true);
		}
		else
		{
			show();
		}

		//
		return _popup;
	};

	const destroyPopup = (_popup, _event = null, _force = false) => {
		if((_popup = checkElem(_popup)) === null)
		{
			return null;
		}
		else if(typeof _popup === 'string')
		{
			return null;
		}
		else if(! popup.isPopup(_popup))
		{
			return null;
		}

		//
		_popup.forceDestroy = _force;

		//
		popupPosition(null, _popup, _event, null, true);

		//
		_popup.out((_e, _f) => {
			if(_f)
			{
				finishDestroyPopup(_popup, _event, _e, _f);
			}
		}, {
			persist: true,
			duration: DEFAULT_DURATION_OUT,
			rotate: DEFAULT_ROTATE,
			border: (DEFAULT_BORDER === false ? false : true),
			borderWidth: ((isString(DEFAULT_BORDER, false) || (isNumber(DEFAULT_BORDER) && DEFAULT_BORDER >= 0)) ? DEFAULT_BORDER : null)
		});

		//
		return _popup;
	};

	const finishDestroyPopup = (_popup, _event, _e, _fin) => {
		//
		_popup.isDestroyed = true;

		//
		if(_popup.parentNode)
		{
			_popup.parentNode.removeChild(_popup, false);
		}

		//
		_popup.target.popup = null;

		//
		popup.list.remove(_popup);

		//
		return _popup;
	}

	const popupPosition = (_callback, _popup, _event_x, _y, _animation = true) => {
		var x, y;

		if(isNumber(_event_x) && isNumber(_y))
		{
			x = _event_x;
			y = _y;
		}
		else if(isObject(_event_x) && isNumber(_event_x.clientX) && isNumber(_event_x.clientY))
		{
			x = _event_x.clientX;
			y = _event_x.clientY;
		}
		else
		{
			return null;
		}

		[ x, y ] = _popup.getPosition(x, y, _popup.offsetWidth, _popup.offsetHeight, DEFAULT_ARRANGE, true);

		if(_animation && isInt(DEFAULT_POSITION_DURATION) && DEFAULT_POSITION_DURATION >= 0)
		{
			_popup.animate({
				left: [ setValue(x) ],
				top: [ setValue(y) ]
			}, {
				duration: DEFAULT_POSITION_DURATION,
				persist: true, state: false
			}, _callback);
		}
		else
		{
			_popup.style.left = setValue(x);
			_popup.style.top = setValue(y);

			if(typeof _callback === 'function')
			{
				_callback({ type: 'finish' });
			}
		}

		return [ x, y ];
	};

	//
	popup.isPopup = isPopup = (... _args) => {
		if(_args.length === 0)
		{
			return null;
		}
		else for(var i = 0; i < _args.length; ++i)
		{
			if(! (isObject(_args[i]) && _args[i].name === 'popup' && _args[i].className === 'popup'))
			{
				return false;
			}
		}

		return true;
	};

	const checkElem = (_elem) => {
		if(_elem)
		{
			if(_elem.target && popup.isPopup(_elem.target))
			{
				return _elem.target;
			}
			else if(_elem.target && popup.isPopup(_elem.target.popup))
			{
				return _elem.target.popup;
			}
			else if(_elem.target && popup.isPopup(_elem.target))
			{
				return _elem.target;
			}
			else if(popup.isPopup(_elem))
			{
				return _elem;
			}
			else if(popup.isPopup(_elem.popup))
			{
				return _elem.popup;
			}
			else if(typeof _elem.dataset?.popup === 'string')
			{
				return _elem.dataset.popup;
			}
			else if(_elem.target && typeof _elem.target.dataset.popup === 'string')
			{
				return _elem.target.dataset.popup;
			}
		}

		return null;
	};

	const findPopup = (_event_x, _y) => {
		var result;
		var x, y;

		if(isNumber(_event_x) && isNumber(_y))
		{
			x = _event_x;
			y = _y;

			result = null;
		}
		else if(isObject(_event_x) && isNumber(_event_x.clientX) && isNumber(_event_x.clientY))
		{
			x = _event_x.clientX;
			y = _event_x.clientY;

			result = checkElem(_event_x.target);
		}
		else
		{
			x = y = null;
			result = null;
		}

		if(result === null && x !== null && y !== null)
		{
			const elems = document.elementsFromPoint(x, y);

			for(const elem of elems)
			{
				if(! elem.isVisible)
				{
					continue;
				}
				else if((result = checkElem(elem)) !== null)
				{
					if(result.forceDestroy)
					{
						result = null;
					}
					else
					{
						break;
					}
				}
			}
		}

		if(result !== null && typeof result !== 'string')
		{
			throw new Error('DEBUG????');//FIXME/alert(result.target.isVisible);
		}

		return result;
	};

	const checkPopups = (_event_x, _y, _destroy = true, _update = true) => {
		const result = [];
		var x, y;
		var withEvent;

		if(isNumber(_event_x) && isNumber(_y))
		{
			x = _event_x;
			y = _y;
			withEvent = null;
		}
		else if(isObject(_event_x) && isNumber(_event_x.clientX) && isNumber(_event_x.clientY))
		{
			x = _event_x.clientX;
			y = _event_x.clientY;
			withEvent = _event_x;

			if((withEvent = _event_x).type === 'pointerout')
			{
				destroyPopup(withEvent.target.popup, withEvent, false);

				if(createPopup(withEvent))
				{
					withEvent.preventDefault();
				}
			}
			else if(createPopup(withEvent))
			{
				withEvent.preventDefault();
			}
		}
		else
		{
			return null;
		}

		const stay = [];
		const list = [ ... popup.list ];
		var out, pop, p;

		for(var i = 0, j = 0, s = 0; i < list.length; ++i)
		{
			p = (pop = list[i]).target;
			if(!p)alert(isPopup(pop) + ' (' + pop.id + '/'+pop.tagName+'/'+pop.name+'/'+pop.className+')');
			if(! p.isVisible)
			{
				out = true;
				pop.forceDestroy = true;
			}
			else if(x < p.offsetLeft)
			{
				out = true;
			}
			else if(y < p.offsetTop)
			{
				out = true;
			}
			else if(x > (p.offsetLeft + p.offsetWidth))
			{
				out = true;
			}
			else if(y > (p.offsetTop + p.offsetHeight))
			{
				out = true;
			}
			else if(typeof p.dataset.popup !== 'string' || p.dataset.popup.length === 0)
			{
				out = true;
			}
			else
			{
				out = false;
			}

			if(out)
			{
				result[j++] = list[i];
			}
			else
			{
				stay[s++] = list[i];
			}
		}

		if(_destroy) for(const p of result)
		{
			destroyPopup(p, _event_x, p.forceDestroy);
		}

		if(_update) for(const p of stay)
		{
			updatePopup(p, _event_x);
		}

		return result;
	};

	const clearPopups = (_force = false) => {
		const list = [ ... popup.list ];
		var result = 0;

		for(const p of list)
		{
			destroyPopup(p, null, _force);
			++result;
		}

		return result;
	};

	const blinkPopups = (_count = DEFAULT_BLINK_COUNT, _duration = DEFAULT_BLINK_DURATION, _delay = DEFAULT_BLINK_DELAY) => {
		for(const p of popup.list)
		{
			p.blink({ count: _count, duration: _duration, delay: _delay });
		}

		return popup.list.length;
	};

	//
	const on = {};
	var paused = false;

	//
	on.pointerdown = (_event) => {
		if(! paused)
		{
			clearPopups(false);
		}
	};

	on.pointerup = (_event) => {
		if(_event.buttons === 0 && !paused)
		{
			if(createPopup(_event))
			{
				_event.preventDefault();
			}
		}
	};

	const pauseON = '<span style="font-size: 0.7em; color: green;">ON</span><span style="font-size: 0.4em; color: blue;">freeze</span>';
	const pauseOFF = '<span style="font-size: 0.7em; color: red;">OFF</span><span style="font-size: 0.4em; color: blue;">freeze</span>';
	
	const setPauseState = (_value = !paused) => {
		if((_value = !!_value) === paused)
		{
			return false;
		}
		else if(_value && popup.count > 0)
		{
			paused = true;
			blinkPopups();
			osd(null, pauseON);

			for(const p of popup.list)
			{
				p.style.opacity = '1';

				if(DEFAULT_FINISH_TEXT_ANIMATION_ON_PAUSE)
				{
					if(p._textAnimation)
					{
						const txt = p._textAnimation;
						delete p._textAnimation;
						p.innerHTML = txt;
					}
				}
			}
		}
		else if(!_value)
		{
			paused = false;
			blinkPopups();
			osd(null, pauseOFF);
		}
	};

	const proceed = (_event) => {
		if(_event.buttons > 0)
		{
			if(! paused)
			{
				clearPopups(false);
			}

			return false;
		}
		else if(_event.ctrlKey)
		{
			setPauseState(true);
			return false;
		}
		else
		{
			setPauseState(false);
		}

		return true;
	};
	
	on.pointermove = (_event) => {
		return;
		if(proceed(_event))
		{
			checkPopups(_event);
		}
	};

	on.pointerover = (_event) => {
		if(proceed(_event))
		{
			var done;

			if(createPopup(_event))
			{
				done = true;
			}
			else
			{
				done = false;
			}

			if(destroyPopup(_event.relatedTarget?.popup, _event, false))
			{
				done = true;
			}

			if(done)
			{
				_event.stop();//preventDefault();
			}
			else
			{
				checkPopups(_event);
			}
		}
	};

	on.pointerout = (_event) => {
		if(proceed(_event))
		{
			var done;

			if(createPopup(_event.relatedTarget))
			{
				done = true;
			}
			else
			{
				done = false;
			}

			if(destroyPopup(_event.target.popup, _event, false))
			{
				done = true;
			}

			if(done)
			{
				_event.stop();
			}
			else
			{
				checkPopups(_event);
			}
		}
	};

	on.keydown = (_event) => {
		switch(_event.key)
		{
			case 'Escape':
				clearPopups(true);
				break;
			case 'Control':
				setPauseState(true);
				break;
			default:
				return;
		}

		_event.preventDefault();
	};

	on.keyup = (_event) => {
		switch(_event.key)
		{
			case 'Control':
				setPauseState(false);
				break;
			default:
				return;
		}

		_event.preventDefault();
	};

	for(const idx in on)
	{
		window.addEventListener(idx, on[idx], { capture: true } );
	}

	//

})();

